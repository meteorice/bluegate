local default_nginx_template = require "bluegate.cmd.templates.nginx"
local bluegate_nginx_template = require "bluegate.cmd.templates.nginx_bluegate"
local kill = require "bluegate.cmd.kill"
local nginx_signals = require "bluegate.cmd.nginx_signals"
local conf_loader = require "bluegate.cmd.conf_loader"
local pl_template = require "pl.template"
local pretty = require 'pl.pretty'
local pl_stringx = require "pl.stringx"
local pl_tablex = require "pl.tablex"
local pl_utils = require "pl.utils"
local pl_file = require "pl.file"
local pl_path = require "pl.path"
local pl_dir = require "pl.dir"
local log = require "bluegate.cmd.log"
local fmt = string.format

local function get_ulimit()
    local ok, _, stdout, stderr = pl_utils.executeex "ulimit -n"
    if not ok then
        return nil, stderr
    end
    local ulimit = pl_stringx.strip(stdout)
    if ulimit:lower():match("unlimited") then
        return 65536
    else
        return tonumber(ulimit)
    end
end

local function gather_system_infos(compile_env)
    local infos = {}

    local ulimit, err = get_ulimit()
    if not ulimit then
        return nil, err
    end

    infos.WORKER_RLIMIT = ulimit
    infos.WORKER_CONNECTIONS = math.min(16384, ulimit)

    return infos
end


local function compile_conf(bluegate_config, conf_template)
    -- computed config properties for templating
    local compile_env = {
        _escape = ">",
        pairs = pairs,
        tostring = tostring
    }

    local infos, err = gather_system_infos()
    if not infos then
      return nil, err
    end

    compile_env = pl_tablex.merge(compile_env, infos,  true)
    compile_env = pl_tablex.merge(compile_env, bluegate_config, true)
    return pl_template.substitute(conf_template, compile_env)
end

local function compile_bluegate_conf(bluegate_config)
    return compile_conf(bluegate_config, bluegate_nginx_template)
end

local function compile_nginx_conf(bluegate_config, template)
    template = template or default_nginx_template
    return compile_conf(bluegate_config, template)
end

local function prepare_prefix(bluegate_config, nginx_custom_template_path)
    log.verbose("preparing nginx prefix directory at %s", bluegate_config.prefix)
    if not pl_path.exists(bluegate_config.prefix) then
        log("prefix directory %s not found, trying to create it", bluegate_config.prefix)
        local ok, err = pl_dir.makepath(bluegate_config.prefix)
        if not ok then
            return nil, err
        end
    elseif not pl_path.isdir(bluegate_config.prefix) then
        return nil, bluegate_config.prefix .. " is not a directory"
    end

    for _, dir in ipairs {"logs", "pids"} do
        local ok, err = pl_dir.makepath(pl_path.join(bluegate_config.prefix, dir))
        if not ok then
            return nil, err
        end
    end

    local ulimit, err = get_ulimit()
    if not ulimit then return nil, err
    elseif ulimit < 4096 then
        log.warn([[ulimit is currently set to "%d". For better performance set it to at least "4096" using "ulimit -n"]], ulimit)
    end

    local nginx_template
    if nginx_custom_template_path then
        if not pl_path.exists(nginx_custom_template_path) then
            return nil, "no such file: " .. nginx_custom_template_path
        end
        nginx_template = pl_file.read(nginx_custom_template_path)
    end

    local nginx_conf, err = compile_nginx_conf(bluegate_config, nginx_template)
    if not nginx_conf then
        return nil, err
    end
    pl_file.write(pl_path.join(bluegate_config.prefix,bluegate_config.nginx_conf), nginx_conf)

    local nginx_bluegate_conf, err = compile_bluegate_conf(bluegate_config)
    if not nginx_bluegate_conf then
        return nil, err
    end

    pl_file.write(pl_path.join(bluegate_config.prefix,bluegate_config.nginx_bluegate_conf), nginx_bluegate_conf)

    local buf = {
        "# *************************",
        "# * DO NOT EDIT THIS FILE *",
        "# *************************",
        "# This configuration file is auto-generated.",
        "",
    }

    for k, v in pairs(bluegate_config) do
        if type(v) == "table" then
            v = table.concat(v, ",")
        end
        if v ~= "" then
            buf[#buf+1] = k .. " = " .. tostring(v)
        end
    end

    pl_file.write(pl_path.join(bluegate_config.prefix,bluegate_config.bluegate_env), table.concat(buf, "\n") .. "\n")
    return true
end

return {
    prepare_prefix = prepare_prefix,
    compile_bluegate_conf = compile_bluegate_conf,
    compile_nginx_conf = compile_nginx_conf
}
